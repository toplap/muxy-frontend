{"version":3,"sources":["app/components/PerformanceCreateForm.tsx","app/components/PerformanceDestroyForm.tsx","app/components/PerformanceEditForm.tsx","app/components/PerformanceCard.tsx","app/components/PerformanceList.tsx","assets/images/longestnight-sunset-2.0.svg","app/components/EventHeader.tsx","app/components/EventPage.tsx","app/App.tsx","index.tsx"],"names":["PerformanceCreateForm","eventUrl","startsAt","endsAt","useState","name","setName","email","setEmail","title","setTitle","description","setDescription","streamkey","setStreamKey","location","setLocation","className","onSubmit","e","preventDefault","fetch","process","method","headers","Headers","Authorization","Accept","body","JSON","stringify","publisher_name","publisher_email","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","event","starts_at","ends_at","then","res","json","data","key","catch","console","error","id","type","placeholder","value","onChange","target","required","rows","maxLength","PerformanceDestroyForm","streamUrl","onRemove","streamKey","failed","setFailed","ok","err","style","color","PerformanceEditForm","currMuxyStream","onSetInEditMode","setCurrMuxyStream","PerformanceCard","muxyStream","cycleNo","inCreateMode","setInCreateMode","inRemoveMode","setInRemoveMode","inEditMode","setInEditMode","removed","setRemoved","startsAtHs","DateTime","fromISO","toFormat","endsAtHs","text","join","resetFormStates","onClick","prevState","url","PerformanceList","slug","setReservedStreamCount","setTotalStreamCount","muxyStreams","setMuxyStreams","useEffect","allStreams","useMemo","sortedStreams","results","sort","a","b","localeCompare","startsAtDt","endsAtDt","allSlots","slotAt","nextSlotAt","plus","minutes","stream","find","streamStartsAtDt","streamEndsAtDt","push","toUTC","length","map","index","EventHeader","progressBarValues","reservedStreamCount","totalStreamCount","reserved","total","percent","calcProgressbar","src","logo","alt","bgColor","baseBgColor","labelClassName","labelAlignment","width","height","margin","customLabel","completed","href","EventPage","muxyEvents","setMuxyEvents","eventSlug","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9aa8fb5.chunk.js","sourcesContent":["import React, { ReactElement, useState } from \"react\";\n\ninterface Props {\n  eventUrl: string;\n  startsAt: string;\n  endsAt: string;\n}\n\nfunction PerformanceCreateForm({\n  eventUrl,\n  startsAt,\n  endsAt,\n}: Props): ReactElement {\n  const [name, setName] = useState<string>(\"\");\n  const [email, setEmail] = useState<string>(\"\");\n  const [title, setTitle] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [streamkey, setStreamKey] = useState<string>(\"\");\n  const [location, setLocation] = useState<string>(\"\");\n  const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n  const muxyUrl: string = process.env.REACT_APP_MUXY_URL as string;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    fetch(`${muxyUrl}/streams/`, {\n      method: \"post\",\n      headers: new Headers({\n        Authorization: `Api-Key ${muxyApiKey}`,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      }),\n      body: JSON.stringify({\n        publisher_name: name,\n        publisher_email: email,\n        title: title,\n        description: description,\n        location: location,\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        event: eventUrl, // This needs to come from the muxy event (isn't available right now)\n        starts_at: startsAt, // This needs to be calculated before\n        ends_at: endsAt, // This needs to be calculated before\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setStreamKey(data.key);\n      })\n      .catch(console.error);\n  };\n\n  return (\n    <>\n      {streamkey && (\n        <div>\n          <p>\n            You have successfully registered for the event. Your streamkey is{\" \"}\n            <b>{streamkey}</b>{\" \"}\n          </p>\n          <p>You should have received this as an email too. </p>\n          <p>\n            Save this key well, you will need it for the event and also to\n            delete your slot again.{\" \"}\n          </p>\n          <p>\n            When this page is reloaded, the key will no longer be displayed.{\" \"}\n          </p>\n        </div>\n      )}\n      {!streamkey && (\n        <form className=\"PerformanceCreateForm\" onSubmit={handleSubmit}>\n          <input\n            id=\"name\"\n            type=\"text\"\n            placeholder=\"Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n          <input\n            id=\"email\"\n            type=\"text\"\n            placeholder=\"E-Mail\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n          />\n          <input\n            id=\"title\"\n            type=\"text\"\n            placeholder=\"Title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            required\n          />\n          <textarea\n            id=\"description\"\n            placeholder=\"Description (used for archive videos)\"\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            rows={3}\n            maxLength={1000}\n          />\n          <input\n            id=\"location\"\n            type=\"text\"\n            placeholder=\"Location\"\n            value={location}\n            onChange={(e) => setLocation(e.target.value)}\n            required\n          />\n          <input type=\"submit\" className=\"card-button\" value=\"Rave On\" />\n        </form>\n      )}\n    </>\n  );\n}\n\nexport default PerformanceCreateForm;\n","import React, { ReactElement, useState } from \"react\";\n\ninterface Props {\n  streamUrl: string;\n  onRemove: () => void;\n}\n\nfunction PerformanceDestroyForm({ streamUrl, onRemove }: Props): ReactElement {\n  const [streamKey, setStreamKey] = useState<string>(\"\");\n  const [failed, setFailed] = useState<boolean>(false);\n  const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setFailed(false);\n\n    const headers = new Headers({\n      Authorization: `Api-Key ${muxyApiKey}`,\n      \"X-Stream-Key\": streamKey,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    });\n\n    fetch(streamUrl, {\n      method: \"DELETE\",\n      headers,\n    })\n      .then((res) => {\n        if (res.ok) {\n          setStreamKey(\"\");\n          onRemove && onRemove();\n        } else {\n          setFailed(true);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        setFailed(true);\n      });\n  };\n\n  return (\n    <>\n      {\n        <form className=\"PerformanceCreateForm\" onSubmit={handleSubmit}>\n          <p>\n            Enter your streaming key to confirm you want to remove your slot. If\n            you do not remember your streaming key, please contact the event\n            organizer.\n          </p>\n\n          {failed && (\n            <p style={{ color: \"red\" }}>\n              Something went wrong, did you entered the incorrect stream key? Please try again.\n            </p>\n          )}\n          <input\n            id=\"key\"\n            type=\"text\"\n            placeholder=\"Stream key\"\n            value={streamKey}\n            onChange={(e) => setStreamKey(e.target.value)}\n            required\n          />\n          <input type=\"submit\" className=\"card-button\" value=\"Remove slot\" />\n        </form>\n      }\n    </>\n  );\n}\n\nexport default PerformanceDestroyForm;\n","import React, { ReactElement, useState } from \"react\";\nimport { MuxyStream } from \"../types\";\n\ninterface Props {\n  streamUrl: string;\n  currMuxyStream: MuxyStream;\n  onSetInEditMode: (inEditMode: boolean) => void;\n  setCurrMuxyStream: (muxyStream: MuxyStream) => void;\n}\n\nfunction PerformanceEditForm({\n  streamUrl,\n  currMuxyStream,\n  onSetInEditMode,\n  setCurrMuxyStream,\n}: Props): ReactElement {\n  const [name, setName] = useState<string>(currMuxyStream.publisher_name);\n  const [title, setTitle] = useState<string>(currMuxyStream.title);\n  const [description, setDescription] = useState<string>(\n    currMuxyStream.description\n  );\n  const [streamKey, setStreamKey] = useState<string>(\"\");\n  const [location, setLocation] = useState<string>(currMuxyStream.location);\n  const [failed, setFailed] = useState<boolean>(false);\n  const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setFailed(false);\n\n    const headers = new Headers({\n      Authorization: `Api-Key ${muxyApiKey}`,\n      \"X-Stream-Key\": streamKey,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    });\n\n    const body = JSON.stringify({\n      publisher_name: name,\n      title: title,\n      description: description,\n      location: location,\n      ends_at: currMuxyStream.ends_at,\n      starts_at: currMuxyStream.starts_at,\n      event: currMuxyStream.event,\n    });\n\n    fetch(streamUrl, {\n      method: \"PUT\",\n      headers,\n      body,\n    })\n      .then((res) => {\n        if (res.ok) {\n          setStreamKey(\"\");\n          onSetInEditMode(false);\n          setCurrMuxyStream({\n            ...currMuxyStream,\n            publisher_name: name,\n            title: title,\n            description: description,\n            location: location,\n          });\n        } else {\n          setFailed(true);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        setFailed(true);\n      });\n  };\n\n  return (\n    <div className=\"PerformanceEditForm\">\n      <form className=\"PerformanceCreateForm\" onSubmit={handleSubmit}>\n        <p>\n          Enter your streaming key to confirm you want to edit your slot. If you\n          do not remember your streaming key, please contact the event\n          organizer.\n        </p>\n        {failed && (\n          <p style={{ color: \"red\" }}>\n            Something went wrong, did you entered the incorrect stream key?\n            Please try again.\n          </p>\n        )}\n\n        <input\n          id=\"key\"\n          type=\"text\"\n          placeholder=\"Stream-Key\"\n          value={streamKey}\n          onChange={(e) => setStreamKey(e.target.value)}\n          required\n        />\n        <p>\n          Here you find your stream information that you can edit. The email\n          address can not displayed for security reasons. If you have problems\n          with your e-mail adress, please contace the event organizer. The\n          information will only be updated if you have entered the correct\n          stream key.\n        </p>\n        <input\n          id=\"name\"\n          type=\"text\"\n          placeholder=\"Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n        <input\n          id=\"title\"\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n        <textarea\n          id=\"description\"\n          placeholder=\"Description (used for archive videos)\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n          rows={3}\n          maxLength={1000}\n        />\n        <input\n          id=\"location\"\n          type=\"text\"\n          placeholder=\"Location\"\n          value={location}\n          onChange={(e) => setLocation(e.target.value)}\n          required\n        />\n        <input type=\"submit\" className=\"card-button\" value=\"Save\" />\n      </form>\n    </div>\n  );\n}\n\nexport default PerformanceEditForm;\n","import React, { ReactElement, useState } from \"react\";\nimport \"../../assets/css/PerformanceCard.css\";\nimport { EmptyMuxyStream, MuxyStream } from \"../types\";\nimport PerformanceCreateForm from \"./PerformanceCreateForm\";\nimport PerformanceDestroyForm from \"./PerformanceDestroyForm\";\nimport { DateTime } from \"luxon\";\nimport PerformanceEditForm from \"./PerformanceEditForm\";\n\ninterface Props {\n  muxyStream: MuxyStream | EmptyMuxyStream;\n  cycleNo: number;\n  eventUrl: string;\n}\n\nconst PerformanceCard = ({\n  muxyStream,\n  cycleNo,\n  eventUrl,\n}: Props): ReactElement => {\n  const [inCreateMode, setInCreateMode] = useState<boolean>(false);\n  const [currMuxyStream, setCurrMuxyStream] = useState<\n    MuxyStream | EmptyMuxyStream\n  >(muxyStream);\n  const [inRemoveMode, setInRemoveMode] = useState<boolean>(false);\n  const [inEditMode, setInEditMode] = useState<boolean>(false);\n  const [removed, setRemoved] = useState<boolean>(false);\n\n  const startsAtHs = DateTime.fromISO(muxyStream.starts_at).toFormat(\n    \"HH:mm LLL dd\"\n  );\n  const endsAtHs = DateTime.fromISO(muxyStream.ends_at).toFormat(\n    \"HH:mm LLL dd\"\n  );\n\n  let text = null;\n  if (\"publisher_name\" in currMuxyStream) {\n    const { publisher_name, location, title, timezone } = currMuxyStream;\n    text = [publisher_name, location, title, timezone].join(\" / \");\n  }\n\n  const resetFormStates = () => {\n    setInCreateMode(false);\n    setInRemoveMode(false);\n    setInEditMode(false);\n  };\n\n  const handleEditClick = () => {\n    resetFormStates();\n    setInEditMode((prevState) => !prevState);\n  };\n\n  const handleRemoveClick = () => {\n    resetFormStates();\n    setInRemoveMode((prevState) => !prevState);\n  };\n  const handleRemove = () => setRemoved(true);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <p className=\"card-header\">Cycle #{cycleNo}</p>\n        <p className=\"card-time\">\n          {startsAtHs}-{endsAtHs}{\" \"}\n          {!inCreateMode && !text && (\n            <button\n              className=\"card-button-plus\"\n              onClick={() => setInCreateMode(true)}\n            >\n              +\n            </button>\n          )}\n        </p>\n        {removed && <p>You have removed your slot succesfully.</p>}\n        {inCreateMode ? (\n          <PerformanceCreateForm\n            eventUrl={eventUrl}\n            startsAt={currMuxyStream.starts_at}\n            endsAt={currMuxyStream.ends_at}\n          />\n        ) : (\n          <>\n            <p className=\"card-text\">{removed ? \"\" : text || \"\"}</p>\n            {!removed && text && (\n              <>\n                <button onClick={handleEditClick} className=\"card-button\">\n                  Edit\n                </button>\n                <button onClick={handleRemoveClick} className=\"card-button\">\n                  Remove\n                </button>\n                {inEditMode && \"url\" in currMuxyStream && (\n                  <PerformanceEditForm\n                    streamUrl={currMuxyStream.url}\n                    currMuxyStream={currMuxyStream}\n                    onSetInEditMode={setInEditMode}\n                    setCurrMuxyStream={setCurrMuxyStream}\n                  />\n                )}\n                {inRemoveMode && \"url\" in currMuxyStream && (\n                  <PerformanceDestroyForm\n                    streamUrl={currMuxyStream.url}\n                    onRemove={handleRemove}\n                  />\n                )}\n              </>\n            )}\n          </>\n        )}\n\n        <hr />\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceCard;\n","import React, { ReactElement, useEffect, useState, useMemo } from \"react\";\nimport \"../../assets/css/PerformanceList.css\";\nimport { MuxyStreams, MuxyStream, EmptyMuxyStream } from \"../types\";\nimport PerformanceCard from \"./PerformanceCard\";\nimport { DateTime } from \"luxon\";\n\ninterface Props {\n  slug: string;\n  eventUrl: string;\n  startsAt: string;\n  endsAt: string;\n  setReservedStreamCount: (reservedStreamCount: number | null) => void;\n  setTotalStreamCount: (ttalStreamCount: number | null) => void;\n}\n\nconst SLOT_DURATION_MIN = 15;\n\nconst PerformanceList = ({\n  slug,\n  eventUrl,\n  startsAt,\n  endsAt,\n  setReservedStreamCount,\n  setTotalStreamCount,\n}: Props): ReactElement => {\n  const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n  const muxyUrl: string = process.env.REACT_APP_MUXY_URL as string;\n  const [muxyStreams, setMuxyStreams] = useState<MuxyStreams | null>(null);\n\n  useEffect(() => {\n    fetch(`${muxyUrl}/streams/?event__slug=${slug}`, {\n      method: \"get\",\n      headers: new Headers({\n        Authorization: `Api-Key ${muxyApiKey}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setMuxyStreams(data);\n      })\n      .catch(console.error);\n  }, [slug]);\n\n  const allStreams: (MuxyStream | EmptyMuxyStream)[] = useMemo(() => {\n    if (!startsAt || !endsAt) return [];\n    if (!muxyStreams) return [];\n\n    const results = muxyStreams?.results || [];\n\n    // Sort streams by start time (just in case)\n    const sortedStreams = results.sort((a, b) => {\n      return a.starts_at.localeCompare(b.starts_at);\n    });\n\n    const startsAtDt = DateTime.fromISO(startsAt);\n    const endsAtDt = DateTime.fromISO(endsAt);\n\n    const allSlots = [];\n\n    // Try to create empty slots for every SLOT_DURATION_MIN minutes If there is\n    // already a stream that fits in the slot (or overlaps with it), use it and\n    // continue from the end of it. Otherwise create an empty slot.\n    let slotAt = startsAtDt;\n    while (slotAt < endsAtDt) {\n      const nextSlotAt = slotAt.plus({ minutes: SLOT_DURATION_MIN });\n\n      // Find the first stream that fits in the slot or overlaps with it\n      const stream = sortedStreams.find((stream) => {\n        const streamStartsAtDt = DateTime.fromISO(stream.starts_at);\n        const streamEndsAtDt = DateTime.fromISO(stream.ends_at);\n        return slotAt >= streamStartsAtDt && nextSlotAt <= streamEndsAtDt;\n      });\n\n      // If no stream fits in the slot, create an empty slot\n      if (!stream) {\n        allSlots.push({\n          starts_at: slotAt.toUTC().toFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z\"),\n          ends_at: nextSlotAt.toUTC().toFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z\"),\n        });\n        slotAt = nextSlotAt;\n      } else {\n        allSlots.push(stream);\n        slotAt = DateTime.fromISO(stream.ends_at);\n      }\n    }\n\n    return allSlots;\n  }, [muxyStreams]);\n\n  setReservedStreamCount(muxyStreams ? muxyStreams.results.length : 0);\n  setTotalStreamCount(allStreams ? allStreams.length : 0);\n\n  return (\n    <div className=\"performance-list\">\n      {allStreams &&\n        allStreams.map((muxyStream, index) => (\n          <PerformanceCard\n            key={index}\n            eventUrl={eventUrl}\n            muxyStream={muxyStream}\n            cycleNo={index + 1}\n          />\n        ))}\n    </div>\n  );\n};\nexport default PerformanceList;\n","export default __webpack_public_path__ + \"static/media/longestnight-sunset-2.0.74a19890.svg\";","import React, { ReactElement } from 'react';\nimport logo from \"../../assets/images/longestnight-sunset-2.0.svg\";\nimport { MuxyEvent } from \"../types\";\nimport { DateTime } from \"luxon\";\nimport ProgressBar from \"@ramonak/react-progress-bar\";\n\ninterface Props {\n    event: MuxyEvent | undefined\n    reservedStreamCount: number | null\n    totalStreamCount: number | null\n}\n\ninterface ProgressType {\n    reserved: number,\n    total: number\n    percent: number;\n}\n\nfunction EventHeader({event, reservedStreamCount, totalStreamCount}:Props): ReactElement {\n\n    const calcProgressbar = (reservedStreamCount: number | null, totalStreamCount: number | null) : ProgressType => {\n        if (reservedStreamCount === null || totalStreamCount === null) {\n            return {reserved: 0, total: 0, percent: 0};\n        }\n\n        return {reserved: reservedStreamCount, total: totalStreamCount, percent: (reservedStreamCount * 100) / totalStreamCount};\n    }\n\n    const progressBarValues = calcProgressbar(reservedStreamCount, totalStreamCount);\n\n    return (\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h4>TOPLAP Presents ...</h4>\n            <h1>TOPLAP20 Live Stream</h1>\n            <h2> {event && DateTime.fromISO(event.starts_at).toFormat(\"dd. LLLL HH:mm\")} - {event && DateTime.fromISO(event.ends_at).toFormat(\"dd. LLLL HH:mm\")} {event && DateTime.fromISO(event.starts_at).toFormat(\"yyyy\")}</h2>\n             <b>Note:</b> This event is not yet open for registration.\n             Slot registration opens Friday, Feb 16th.\n            <hr/>\n\n            <ProgressBar\n                className=\"wrapper\"\n                bgColor={\"#a9c27c\"}\n                baseBgColor={\"#ffffff\"}\n                labelClassName=\"label\"\n                labelAlignment={\"outside\"}\n                width={\"100%\"}\n                height={\"28px\"}\n                margin={\"8px\"}\n                customLabel={`${progressBarValues.reserved}/${progressBarValues.total} slots are filled`}\n                completed={progressBarValues.percent}\n            />\n\n            <hr/>\n            <p>Your timezone: {Intl.DateTimeFormat().resolvedOptions().timeZone}</p>\n            <p className=\"link-paragraph\"><b>Watch live here &gt;&gt;&gt; <a href={\"https://eulerroom.com\"}>https://eulerroom.com/</a></b></p>\n        </header>\n    );\n}\n\nexport default EventHeader;\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport PerformanceList from \"../components/PerformanceList\";\nimport { MuxyEvents } from \"../types\";\nimport EventHeader from \"./EventHeader\";\n\nfunction EventPage(): ReactElement {\n  const [muxyEvents, setMuxyEvents] = useState<MuxyEvents | null>(null);\n  const [reservedStreamCount, setReservedStreamCount] = useState<number | null>(\n    null\n  );\n  const [totalStreamCount, setTotalStreamCount] = useState<number | null>(null);\n\n  const muxyApiKey: string = process.env.REACT_APP_MUXY_API_KEY as string;\n  const muxyUrl: string = process.env.REACT_APP_MUXY_URL as string;\n  const eventSlug: string = process.env.REACT_APP_EVENT_SLUG as string;\n\n  useEffect(() => {\n    fetch(`${muxyUrl}/events/?slug=${eventSlug}`, {\n      method: \"get\",\n      headers: new Headers({\n        Authorization: `Api-Key ${muxyApiKey}`,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setMuxyEvents(data);\n      })\n      .catch(console.error);\n  }, [eventSlug]);\n\n  const event = muxyEvents?.results[0];\n\n  return (\n    <main className=\"App\">\n      <EventHeader\n        event={event}\n        reservedStreamCount={reservedStreamCount}\n        totalStreamCount={totalStreamCount}\n      />\n      {event && (\n        <PerformanceList\n          slug={event.slug}\n          eventUrl={event.url}\n          startsAt={event.starts_at}\n          endsAt={event.ends_at}\n          setReservedStreamCount={setReservedStreamCount}\n          setTotalStreamCount={setTotalStreamCount}\n        />\n      )}\n    </main>\n  );\n}\n\nexport default EventPage;\n","import React, { ReactElement } from 'react';\nimport EventPage from \"./components/EventPage\";\n\nfunction App(): ReactElement {\n  return <EventPage />\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/styles.css';\nimport App from './app/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}